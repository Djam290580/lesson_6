# Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список только числами.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
# введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и
# отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

# class OwnError(Exception):
#     def __init__(self, txt):
#         self.txt = txt
#
#
# # inp_data = input('Only positive numbers -  ')
#
# try:
#     num = []
#     while num != '#':
#         for i in map(int, input('Для выхода наберите "#"\nВведите числа, используя пробел:\n ').split()):
#             num.append(i)
#
#         print(num)
#     if i < 0:
#         raise OwnError('Negative number!!!')
#
# except ValueError:
#     print(f'Список завершен:\n {num}')
#
# except OwnError as err:
#     print(err)
#
# else:
#     print(f'Список завершен {num}')

#-------------------------------------------Вариант решения----------------------------------------------------

class OwnError(Exception):
    def __init__(self, txt):
        self.txt = txt


result_list = []
while True:
    numbers = input('Введите числа для списка(# - символ для завершения):\n').split()
    # print(numbers)
    for value in numbers:
        if value == '#':
            print(f'Окончательный список = {result_list}')
            break
        try:
            result_list.append(int(value))
        except ValueError:
            print(f'Значение {value} не было учетно - неверный тип')
        except OwnError as err:
            print(err)


